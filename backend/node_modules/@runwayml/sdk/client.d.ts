import type { RequestInit, RequestInfo } from "./internal/builtin-types.js";
import type { PromiseOrValue, MergedRequestInit, FinalizedRequestInit } from "./internal/types.js";
export type { Logger, LogLevel } from "./internal/utils/log.js";
import * as Opts from "./internal/request-options.js";
import * as Errors from "./core/error.js";
import * as Uploads from "./core/uploads.js";
import * as API from "./resources/index.js";
import { APIPromise } from "./core/api-promise.js";
import { CharacterPerformance, CharacterPerformanceCreateParams, CharacterPerformanceCreateResponse } from "./resources/character-performance.js";
import { ImageToVideo, ImageToVideoCreateParams, ImageToVideoCreateResponse } from "./resources/image-to-video.js";
import { Organization, OrganizationRetrieveResponse, OrganizationRetrieveUsageParams, OrganizationRetrieveUsageResponse } from "./resources/organization.js";
import { SoundEffect, SoundEffectCreateParams, SoundEffectCreateResponse } from "./resources/sound-effect.js";
import { SpeechToSpeech, SpeechToSpeechCreateParams, SpeechToSpeechCreateResponse } from "./resources/speech-to-speech.js";
import { TaskRetrieveResponse, Tasks } from "./resources/tasks.js";
import { TextToImage, TextToImageCreateParams, TextToImageCreateResponse } from "./resources/text-to-image.js";
import { TextToSpeech, TextToSpeechCreateParams, TextToSpeechCreateResponse } from "./resources/text-to-speech.js";
import { TextToVideo, TextToVideoCreateParams, TextToVideoCreateResponse } from "./resources/text-to-video.js";
import { VideoToVideo, VideoToVideoCreateParams, VideoToVideoCreateResponse } from "./resources/video-to-video.js";
import { VideoUpscale, VideoUpscaleCreateParams, VideoUpscaleCreateResponse } from "./resources/video-upscale.js";
import { VoiceDubbing, VoiceDubbingCreateParams, VoiceDubbingCreateResponse } from "./resources/voice-dubbing.js";
import { VoiceIsolation, VoiceIsolationCreateParams, VoiceIsolationCreateResponse } from "./resources/voice-isolation.js";
import { type Fetch } from "./internal/builtin-types.js";
import { HeadersLike, NullableHeaders } from "./internal/headers.js";
import { FinalRequestOptions, RequestOptions } from "./internal/request-options.js";
import { type LogLevel, type Logger } from "./internal/utils/log.js";
export interface ClientOptions {
    /**
     * Defaults to process.env['RUNWAYML_API_SECRET'].
     */
    apiKey?: string | undefined;
    runwayVersion?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['RUNWAYML_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     *
     * @unit milliseconds
     */
    timeout?: number | undefined;
    /**
     * Additional `RequestInit` options to be passed to `fetch` calls.
     * Properties will be overridden by per-request `fetchOptions`.
     */
    fetchOptions?: MergedRequestInit | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we expect that `fetch` is defined globally.
     */
    fetch?: Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `null` in request options.
     */
    defaultHeaders?: HeadersLike | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Record<string, string | undefined> | undefined;
    /**
     * Set the log level.
     *
     * Defaults to process.env['RUNWAYML_LOG'] or 'warn' if it isn't set.
     */
    logLevel?: LogLevel | undefined;
    /**
     * Set the logger.
     *
     * Defaults to globalThis.console.
     */
    logger?: Logger | undefined;
}
/**
 * API Client for interfacing with the RunwayML API.
 */
export declare class RunwayML {
    #private;
    apiKey: string;
    runwayVersion: string;
    baseURL: string;
    maxRetries: number;
    timeout: number;
    logger: Logger | undefined;
    logLevel: LogLevel | undefined;
    fetchOptions: MergedRequestInit | undefined;
    private fetch;
    protected idempotencyHeader?: string;
    private _options;
    /**
     * API Client for interfacing with the RunwayML API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['RUNWAYML_API_SECRET'] ?? undefined]
     * @param {string | undefined} [opts.runwayVersion=2024-11-06]
     * @param {string} [opts.baseURL=process.env['RUNWAYML_BASE_URL'] ?? https://api.dev.runwayml.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.
     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, apiKey, runwayVersion, ...opts }?: ClientOptions);
    /**
     * Create a new client instance re-using the same options given to the current client with optional overriding.
     */
    withOptions(options: Partial<ClientOptions>): this;
    protected defaultQuery(): Record<string, string | undefined> | undefined;
    protected validateHeaders({ values, nulls }: NullableHeaders): void;
    protected authHeaders(opts: FinalRequestOptions): Promise<NullableHeaders | undefined>;
    /**
     * Basic re-implementation of `qs.stringify` for primitive types.
     */
    protected stringifyQuery(query: Record<string, unknown>): string;
    private getUserAgent;
    protected defaultIdempotencyKey(): string;
    protected makeStatusError(status: number, error: Object, message: string | undefined, headers: Headers): Errors.APIError;
    buildURL(path: string, query: Record<string, unknown> | null | undefined, defaultBaseURL?: string | undefined): string;
    /**
     * Used as a callback for mutating the given `FinalRequestOptions` object.
     */
    protected prepareOptions(options: FinalRequestOptions): Promise<void>;
    /**
     * Used as a callback for mutating the given `RequestInit` object.
     *
     * This is useful for cases where you want to add certain headers based off of
     * the request properties, e.g. `method` or `url`.
     */
    protected prepareRequest(request: RequestInit, { url, options }: {
        url: string;
        options: FinalRequestOptions;
    }): Promise<void>;
    get<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    post<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    patch<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    put<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    delete<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    private methodRequest;
    request<Rsp>(options: PromiseOrValue<FinalRequestOptions>, remainingRetries?: number | null): APIPromise<Rsp>;
    private makeRequest;
    fetchWithTimeout(url: RequestInfo, init: RequestInit | undefined, ms: number, controller: AbortController): Promise<Response>;
    private shouldRetry;
    private retryRequest;
    private calculateDefaultRetryTimeoutMillis;
    buildRequest(inputOptions: FinalRequestOptions, { retryCount }?: {
        retryCount?: number;
    }): Promise<{
        req: FinalizedRequestInit;
        url: string;
        timeout: number;
    }>;
    private buildHeaders;
    private buildBody;
    static RunwayML: typeof RunwayML;
    static DEFAULT_TIMEOUT: number;
    static RunwayMLError: typeof Errors.RunwayMLError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    tasks: API.Tasks;
    imageToVideo: API.ImageToVideo;
    videoToVideo: API.VideoToVideo;
    textToVideo: API.TextToVideo;
    textToImage: API.TextToImage;
    videoUpscale: API.VideoUpscale;
    characterPerformance: API.CharacterPerformance;
    textToSpeech: API.TextToSpeech;
    soundEffect: API.SoundEffect;
    voiceIsolation: API.VoiceIsolation;
    voiceDubbing: API.VoiceDubbing;
    speechToSpeech: API.SpeechToSpeech;
    organization: API.Organization;
}
export declare namespace RunwayML {
    export type RequestOptions = Opts.RequestOptions;
    export { Tasks as Tasks, type TaskRetrieveResponse as TaskRetrieveResponse };
    export { ImageToVideo as ImageToVideo, type ImageToVideoCreateResponse as ImageToVideoCreateResponse, type ImageToVideoCreateParams as ImageToVideoCreateParams, };
    export { VideoToVideo as VideoToVideo, type VideoToVideoCreateResponse as VideoToVideoCreateResponse, type VideoToVideoCreateParams as VideoToVideoCreateParams, };
    export { TextToVideo as TextToVideo, type TextToVideoCreateResponse as TextToVideoCreateResponse, type TextToVideoCreateParams as TextToVideoCreateParams, };
    export { TextToImage as TextToImage, type TextToImageCreateResponse as TextToImageCreateResponse, type TextToImageCreateParams as TextToImageCreateParams, };
    export { VideoUpscale as VideoUpscale, type VideoUpscaleCreateResponse as VideoUpscaleCreateResponse, type VideoUpscaleCreateParams as VideoUpscaleCreateParams, };
    export { CharacterPerformance as CharacterPerformance, type CharacterPerformanceCreateResponse as CharacterPerformanceCreateResponse, type CharacterPerformanceCreateParams as CharacterPerformanceCreateParams, };
    export { TextToSpeech as TextToSpeech, type TextToSpeechCreateResponse as TextToSpeechCreateResponse, type TextToSpeechCreateParams as TextToSpeechCreateParams, };
    export { SoundEffect as SoundEffect, type SoundEffectCreateResponse as SoundEffectCreateResponse, type SoundEffectCreateParams as SoundEffectCreateParams, };
    export { VoiceIsolation as VoiceIsolation, type VoiceIsolationCreateResponse as VoiceIsolationCreateResponse, type VoiceIsolationCreateParams as VoiceIsolationCreateParams, };
    export { VoiceDubbing as VoiceDubbing, type VoiceDubbingCreateResponse as VoiceDubbingCreateResponse, type VoiceDubbingCreateParams as VoiceDubbingCreateParams, };
    export { SpeechToSpeech as SpeechToSpeech, type SpeechToSpeechCreateResponse as SpeechToSpeechCreateResponse, type SpeechToSpeechCreateParams as SpeechToSpeechCreateParams, };
    export { Organization as Organization, type OrganizationRetrieveResponse as OrganizationRetrieveResponse, type OrganizationRetrieveUsageResponse as OrganizationRetrieveUsageResponse, type OrganizationRetrieveUsageParams as OrganizationRetrieveUsageParams, };
}
//# sourceMappingURL=client.d.ts.map